const { PrismaClient } = require("@prisma/client");
const z = require("zod");
const bcrypt = require("bcrypt");
const { transporter } = require("../utils/nodemailer");
const jwt = require("jsonwebtoken");

const prisma = new PrismaClient();

const privacyKey = process.env.PRIVACY_KEY;

// Define the user schema using zod
const UserSchema = z.object({
  userId: z.number().optional(), // optional if it's auto-generated by the database
  Firstname: z.string().min(1, { message: "Must be at least one character" }),
  LastName: z.string().optional(), // optional if LastName is not required
  email: z.string().toLowerCase().email({ message: "Enter a valid email" }),
  password: z.string().min(8, { message: "Must be at least 8 characters" }),
  phone: z.string().length(10, { message: "Number must be 10 digits" }),
});

const LoginSchema = z.object({
  email: z.string().toLowerCase().email({ message: "Enter a valid email" }),
  password: z.string().min(8, { message: "Must be atleast 8 characters" }),
});

const changePasswordSchema = z.object({
  userid: z.number(),
  password: z.string().min(8, { message: "Must be atleast 8 characters" }),
});
const signup = async (req, res) => {
  const ip = req.body;
  const result = UserSchema.safeParse(ip);
  try {
    if (result.success) {
      const hashedPassword = await bcrypt.hash(result.data.password, 10);

      const user = await prisma.user.create({
        data: {
          Firstname: result.data.Firstname,
          LastName: result.data.LastName,
          email: result.data.email,
          password: hashedPassword,
          phone: result.data.phone,
        },
      });

      res.status(201).json({
        success: true,
        message: "User added successfully",
      });
    } else {
      res.status(400).json({
        success: false,
        message: result.error.errors.map((e) => {
          return { message: e.message, path: e.path };
        }),
      });
    }
  } catch (err) {
    res
      .status(500)
      .json({ success: false, message: "Unexpected error", err: err });
  }
};

const signin = async (req, res) => {
  const result = LoginSchema.safeParse(req.body);
  try {
    if (result.success) {
      // const hashedPassword = await bcrypt.hash(result.data?.password, 10);
      const data = await prisma.user.findUnique({
        where: {
          email: result.data.email,
        },
      });

      if (!data) {
        res
          .status(500)
          .json({ success: false, message: "Invalid Email or Password" });
      }
      const comparePassword = await bcrypt.compare(
        result.data.password,
        data?.password
      );
      if (!comparePassword) {
        res
          .status(400)
          .json({ success: false, message: "Invalid Email or Password" });
      } else {
        const token = await jwt.sign({ userid: data?.userid }, privacyKey);
        res.cookie("token", token, {
          httpOnly: true, // Prevents JavaScript from accessing the cookie
          // secure: process.env.NODE_ENV === "production", // Ensures the cookie is only sent over HTTPS in production
          sameSite: "strict", // Helps prevent CSRF attacks
          // maxAge: 24 * 60 * 60 * 1000, // Cookie expiration time (1 day in milliseconds)
          path: "/", // The cookie is available to all routes
        });
        res.status(200).json({
          success: true,
          message: "LoggedIn Successfully",
          data: data,
        });
      }
    }
  } catch (err) {
    res.status(500).json({ success: false, message: "Unexpected Error" });
  }
};

const logout = (req, res) => {
  res.clearCookie("token");
  res.status(200).json({ success: true, message: "Logged out successfully" });
};

const forgotPassword = async (req, res) => {
  try {
    const data = await prisma.user.findUnique({
      where: {
        email: req.body.email,
      },
    });
    if (!data) {
      res
        .status(400)
        .json({ success: false, message: "Email doesnt exist in registery" });
    }
    const otp = Math.floor(1000 + Math.random() * 9000);
    const mailOption = {
      from: `Aprameya R <${process.env.GMAIL_ID}>`,
      to: [req.body.email],
      subject: `Powered by ${process.env.COMPANY_NAME}`,
      text: `User otp is ${otp}`,
    };
    const storeOtp = await prisma.oTP.create({
      data: {
        otp: otp,
        userid: data.userid,
      },
    });
    await transporter.sendMail(mailOption);
    console.log("Email has been sent");
    res.status(200).json({
      success: true,
      message: "Email sent successfully",
    });
  } catch (err) {
    console.log(err);
    res.status(500).json({
      success: false,
      message: "Unexpected Error",
      err: err,
    });
  }
};
const otpVerification = async (req, res) => {
  try {
    const otp = req.body?.otp;
    const otpEntry = await prisma.oTP.findFirst({
      where: {
        otp: otp,
      },
      include: {
        user: true,
      },
    });

    const user = otpEntry?.user;
    if (!user) {
      res.status(400).json({ success: false, message: "Invalid or wrong OTP" });
    } else {
      res
        .status(200)
        .json({ success: true, message: "OTP is correct", data: user });
    }
  } catch (err) {
    res.status(500).json({ success: false, message: "Unexpected Error" });
  }
};

const changePassword = async (req, res) => {
  try {
    const result = changePasswordSchema.safeParse(req.body);
    if (result.success) {
      const hashedPassword = await bcrypt.hash(result.data.password, 10);
      const data = await prisma.user.update({
        where: {
          userid: result.data.userid,
        },
        data: {
          password: hashedPassword,
        },
      });
      res.status(200).json({
        success: true,
        message: "Password changed successfully",
      });
    } else {
      res.status(400).json({
        success: false,
        message: result.error.errors.map((error) => {
          return { message: error.message, path: error.path };
        }),
      });
    }
  } catch (err) {
    res.status(500).json({ success: false, message: "Unexpected Error" });
  }
};

module.exports = {
  signup,
  signin,
  logout,
  forgotPassword,
  otpVerification,
  changePassword,
};
